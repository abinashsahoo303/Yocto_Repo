yocto sdk:
**********

what is linaro toolchain?
	a arm cross toolchain to compile c files

mbpoll depends on libmodbus lib

SDK: is customised arm cross toolchain
	core-image-minimal rootfs
		IMAGE_INSTALL_Append = " libmodbus "


now bitbake core-image-minimal -c populate_sdk
output file: ls  build/tmpdeploy/sdk
poky-glibc-x86_64-core-image-minimal-cortexa8hf-neon-beaglebone-yocto-toolchain-4.0.4.sh

$ ./poky-glibc-x86_64-core-image-minimal-cortexa8hf-neon-beaglebone-yocto-toolchain-4.0.4.sh 

Poky (Yocto Project Reference Distro) SDK installer version 4.0.4
=================================================================
Enter target directory for SDK (default: /opt/poky/4.0.4): .
							************* press "."
You are about to install the SDK to "/home/thales/test_sdk". Proceed [Y/n]? y
				    *********************
Extracting SDK...............................................done
Setting it up...^[[Adone
SDK has been successfully set up and is ready to be used.
Each time you wish to use the SDK in a new shell session, you need to source the environment setup script e.g.
 $ . /home/thales/test_sdk/environment-setup-cortexa8hf-neon-poky-linux-gnueabi
[thales@localhost test_sdk]$ ls
environment-setup-cortexa8hf-neon-poky-linux-gnueabi                                      sysroots
poky-glibc-x86_64-core-image-minimal-cortexa8hf-neon-beaglebone-yocto-toolchain-4.0.4.sh  version-cortexa8hf-neon-poky-linux-gnueabi
site-config-cortexa8hf-neon-poky-linux-gnueabi
********************************************************
[thales@localhost test_sdk]$ echo $CC
arm-poky-linux-gnueabi-gcc -mfpu=neon -mfloat-abi=hard -mcpu=cortex-a8 -fstack-protector-strong -O2 -D_FORTIFY_SOURCE=2 -Wformat -Wformat-security -Werror=format-security --sysroot=/home/thales/yoctotutor/toolchain/sysroots/cortexa8hf-neon-poky-linux-gnueabi

$ $CC hello.c -o hello
***************************************************************

DEVTOOL:
*******

devtool add https://github.com/stephane/libmodbus.git
devtool build libmodbus
devtool finish libmodbus meta-app
****************************************************************

SYSTEMD:
*******

1. bootloader runs
2. kernel runs
3. rootfs runs
	init fils runs

tset1 test2 yest3 test4

initd mechani

hello.bb hello

hello.service /lib/systemd/system

systemctl enable hello.service
	/etc/systemd/system/hello.service
systemctl disable hello.service
	remove soft link from /etc/systemd/system/hello.service


How to write hello service:
***************************
hello.service
-------------
[]
DESCRIPTION=""
After=networkd

[]
type=
Execstart='/usr/bin/hello'

wantedby= 'multi.user.target'
*********************************************
hello-service.bb
****************
DESCRIPTION=""
LICENSE="CLOSED"
SRC_URI =""
S="${WORKDIR}"
do_install(){
	install -d ${D}/lib/systemd/system
	install -m 777 ${S}/hello.service  ${D}/lib/systemd/system  	
}

SYSTMD_SERVICE_${PN} ="hello.service"
SYSTEMD_AUTO_ENABLE_${PN} ="enable"
*******************************************************************
FEATURES:

IMGAE_FEATURES:
----------------
core-image-minimal.bb
	IMAGE_FEATURS_append =" ssh-server-openssh"
bitbake core-image-minimal    # ssh bb files added to rootfs
	
bitbake core-image-thales	# ssh bb files wont added to rootfs


MCHINE_FEATURES:

beaglebone-yocto.conf
	MACHINE_FEATUES_append =" alsa "

bitbake core-image-minimal    # alsa bb files added to rootfs

bitbake core-image-thales       # alsa bb files added to rootfs



DISTRO_FEATURES:

poky.conf
	DISTRO_FEATUES_append =" alsa"

what ever the machine or what ever the rootfs bb files alsa package added to rootfs
beaglebone-yocto.conf
raspi-4.conf
genric-x86_64.conf

bitbake core-image-minimal    # alsa bb files added to rootfs

bitbake core-image-thales       # alsa bb files added to rootfs




core-image-minimal.bb

IMAGE_INSTALL_append ="hello "







